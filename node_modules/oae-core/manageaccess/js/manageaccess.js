/*!
 * Copyright 2013 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

define(['jquery', 'oae.core', 'jquery.autosuggest'], function($, oae) {

    return function(uid) {


        //////////////////////
        // WIDGET VARIABLES //
        //////////////////////

        // The widget container
        var $rootel = $('#' + uid);

        // Caches the group profile
        var groupData = null;

        // Caches the visibility of the group
        var visibility = null;

        // Caches the member updates that need to be applied
        var membersUpdates = {};

        // Variable that will be used to keep track of the current infinite scroll instance
        var infinityScroll = null;


        //////////////////////
        // DATA PERSISTENCE //
        //////////////////////

        /**
         * Update the group visibility in case it has been changed
         *
         * @param  {Function}       callback            Standard callback function
         * @param  {Object}         callback.err        Error object containing error code and error message
         */
        var saveVisibility = function(callback) {
            // Update the visibility if it has changed
            if (visibility !== groupData.visibility) {
                oae.api.group.updateGroup(groupData.id, {
                    'visibility': visibility
                }, callback);
            } else {
                callback();
            }
        }

        /**
         * Add, update or remove all of the modified group members.
         *
         * @param  {Function}       callback            Standard callback function
         * @param  {Object}         callback.err        Error object containing error code and error message
         */
        var saveMembers = function(callback) {
            // Update the members if changes were made
            if (!$.isEmptyObject(membersUpdates)) {
                oae.api.group.setGroupMembers(groupData.id, membersUpdates, callback);
            } else {
                callback();
            }
        };

        /**
         * Save the group's visibility setting in case it has been changed and add/update/remove
         * all of the modified members, if any. A success notification will be shown if no errors
         * occurred, otherwise a failure notification will be shown.
         */
        var saveManageAccess = function() {
            // Update the visibility in case it has been changed
            saveVisibility(function(visibilityErr) {
                if (!visibilityErr) {
                    groupData.visibility = visibility;
                }

                // Update the group membership in case any changes have been made
                saveMembers(function(membersErr) {
                    // Show a failure notification if the members or visibility could not be saved
                    if (visibilityErr || membersErr) {
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__GROUP_ACCESS_NOT_UPDATED__', 'manageaccess'),
                            oae.api.i18n.translate('__MSG__THE_GROUP_ACCESS_COULD_NOT_BE_UPDATED__', 'manageaccess'),
                            'error'
                        );
                    // Show a success notification and close the dialog when the members and visibility have been updated
                    } else {
                        oae.api.util.notification(
                            oae.api.i18n.translate('__MSG__GROUP_ACCESS_UPDATED__', 'manageaccess'),
                            oae.api.i18n.translate('__MSG__GROUP_ACCESS_SUCCESSFULLY_UPDATED__', 'manageaccess')
                        );
                        $(document).trigger('done.manageaccess.oae', groupData);
                        $('#manageaccess-modal', $rootel).modal('hide');
                    }
                });
            });
        };

        /**
         * Checks if any values have changed and disables/enables the widget save button in the primary panel.
         */
        var enableDisableSave = function() {
            if (visibility === groupData.visibility && $.isEmptyObject(membersUpdates)) {
                $('#manageaccess-overview-save', $rootel).prop('disabled', true);
            } else {
                $('#manageaccess-overview-save', $rootel).prop('disabled', false);
            }
        };


        ////////////////////////////
        // MEMBER INFINITE SCROLL //
        ////////////////////////////

        /**
         * Initialize a new infinite scroll container that fetches the group's members.
         */
        var getMembers = function() {
            // Disable the previous infinite scroll
            if (infinityScroll) {
                infinityScroll.kill();
            }

            var url = '/api/group/' + groupData.id + '/members';

            // Set up the infinite scroll instance
            infinityScroll = $('.oae-list', $rootel).infiniteScroll(url, {
                'limit': 8
            }, '#manageaccess-members-template', {
                'scrollContainer': $('#manageaccess-overview-selected', $rootel)
            });
        };

        /**
         * Prepends members to the list that were selected through the autosuggest.
         *
         * @param  {Object[]}    autoSuggestMembers    Trimmed member object as used by the members feed containing all properties necessary to render a list item in the infinite scroll
         */
        var addNewMembers = function(autoSuggestMembers) {
            $.each(autoSuggestMembers, function(i, newMember) {
                membersUpdates[newMember.profile.id] = newMember.role;
            });

            infinityScroll.prependItems(autoSuggestMembers);

            // Enable or disable the save button
            enableDisableSave();
        };

        /**
         * Removes a member from the list.
         */
        var deleteMember = function() {
            var principalId = $(this).attr('data-id');

            // Remove the list item
            infinityScroll.removeItems(principalId);

            // Mark the member as deleted
            membersUpdates[principalId] = false;

            // Enable or disable the save button
            enableDisableSave();
        };

        /**
         * Update the role of a member. This will only be persisted when the `Save` button is clicked.
         */
        var updateRole = function() {
            var principalId = $(this).attr('data-id');
            var selectedRole = $(this).val();

            membersUpdates[principalId] = selectedRole;

            // Enable or disable the save button
            enableDisableSave();
        };


        /////////////////
        // AUTOSUGGEST //
        /////////////////

        /**
         * Disable/enable the add button when an item has been added/removed from the autosuggest field.
         */
        var autoSuggestChanged = function() {
            $('#manageaccess-share-update', $rootel).prop('disabled', getAutosuggestSelection().length ? false : true);
        };

        /**
         * Initializes the autosuggest used for sharing with other users or groups.
         * TODO: The Autosuggest initiation needs to be replaced by the API function once merged.
         */
        var setUpAutoSuggest = function() {
            // Initialize the autoSuggest field
            $('#manageaccess-share-autosuggest', $rootel).autoSuggest('/api/search/general', {
                'selectedItemProp': 'displayName',
                'searchObjProps': 'displayName',
                'selectedValuesProp': 'id',
                'extraParams': {
                    'resourceTypes': ['user', 'group']
                },
                'minChars': 3,
                'neverSubmit': true,
                'showResultListWhenNoMatch': true,
                'retrieveLimit': 5,
                'retrieveComplete': function(data) {
                    // TODO: Remove this once the API function for the autosuggest
                    // is in place. That will be taking care of potential XSS issues.
                    $.each(data.results, function(index, result) {
                        result.displayName = oae.api.util.security().encodeForHTML(result.displayName);
                    });
                    return data.results;
                },
                'selectionAdded': autoSuggestChanged,
                'selectionRemoved': function(el) {
                    el.remove();
                    autoSuggestChanged();
                }
            });
        };

        /**
         * Get the principals that were selected in the autosuggest field.
         *
         * @return {Object[]}    autoSuggestMembers    Trimmed member object as used by the members feed containing all properties necessary to render a list item in the infinite scroll
         */
        var getAutosuggestSelection = function() {
            var autoSuggestMembers = [];
            $.each($rootel.find('.as-selections > li'), function(index, selection) {
                var id = $(selection).attr('data-value');
                // jQuery autosuggest will always prepare an empty item for the next item that needs to be
                // added to the list. Therefore, it is possible that an item in the list is empty
                if (id) {
                    var selectionData = $(selection).data().data;
                    if (selectionData) {
                        // Mimic the standard principal object so it can be passed into standard macros
                        autoSuggestMembers.push({
                            'profile': {
                                'displayName': selectionData.displayName,
                                'id': id,
                                'picture': {
                                    'medium': selectionData.thumbnailUrl
                                },
                                'resourceType': selectionData.resourceType,
                                'visibility': selectionData.visibility
                            },
                            'role': $('#manageaccess-share-role', $rootel).val()
                        });
                    }
                }
            });
            return autoSuggestMembers;
        };


        /////////////////////
        // VIEW MANAGEMENT //
        /////////////////////

        /**
         * Shows a specified panel using the provided name.
         *
         * @param  {String}    name    The name of the panel to show (i.e. 'overview', 'share', 'visibility')
         */
        var showPanel = function(name) {
            // Show the container and footer
            $('.modal-body > div', $rootel).hide();
            $('#manageaccess-' + name, $rootel).show();
            $('.modal-footer > div', $rootel).hide();
            $('#manageaccess-' + name + '-footer', $rootel).show();
        };

        /**
         * Renders the visibility view of the group permissions.
         */
        var renderVisibility = function() {
            oae.api.util.template().render($('#manageaccess-visibility-template', $rootel), {
                'group': groupData,
                'visibility': visibility
            }, $('#manageaccess-visibility', $rootel));
        };

        /**
         * Renders the share view of the group permissions.
         * Includes an autosuggest to select new members to add to the group.
         */
        var renderShare = function() {
            oae.api.util.template().render($('#manageaccess-share-template', $rootel), {
                'group': groupData
            }, $('#manageaccess-share', $rootel));

            setUpAutoSuggest();
        };

        /**
         * Renders the visibility settings overview.
         */
        var renderVisibilityOverview = function() {
            oae.api.util.template().render($('#manageaccess-overview-visibility-template', $rootel), {
                'group': groupData,
                'visibility': visibility
            }, $('#manageaccess-overview-visibility-container', $rootel));
        };


        //////////////////////
        // DEINITIALIZATION //
        //////////////////////

        /**
         * Resets the widget to its initial state
         */
        var reset = function() {
            // Show the overview container and footer
            showPanel('overview');

            // Reset the members cache
            membersUpdates = {};

            // Disable the save button in overview
            $('#manageaccess-overview-save', $rootel).prop('disabled', true);
            // Disable the add button in the share view
            $('#manageaccess-share-update', $rootel).prop('disabled', true);
        };


        ////////////////////
        // INITIALIZATION //
        ////////////////////

        /**
         * Initializes the default state:
         * - Cache the group data
         * - Cache the current visibility setting
         * - Render the visibility overview
         * - Get and render the members
         *
         * @param  {Object}  ev    Standard event object coming from the `oae.context.send.manageaccess` or `oae.context.send.manageaccess-add` events.
         * @param  {Object}  data  The context data object
         */
        var initManageAccess = function(ev, data) {
            groupData = data;
            visibility = data.visibility;
            renderVisibilityOverview();
            getMembers();
        };

        /**
         * Sets up the manage access modal
         */
        var setUpManageAccessModal = function() {
            // Catches the click event on `oae-trigger-manageaccess` class elements
            // and shows the modal dialog.
            $(document).on('click', '.oae-trigger-manageaccess', function() {
                $('#manageaccess-modal', $rootel).modal();
                $(document).trigger('oae.context.get', 'manageaccess');
            });

            // Catches the `oae-trigger-manageaccess-add` click event, indicating the widget should go
            // straight into the share panel. Useful for adding new members.
            $(document).on('click', '.oae-trigger-manageaccess-add', function() {
                $('#manageaccess-modal', $rootel).modal();
                // Using a dash instead of a period here so the `oae.context.send.manageaccess` does not catch this.
                $(document).trigger('oae.context.get', 'manageaccess-add');
            });

            // Receives the page context and initializes the widget into the overview panel.
            $(document).on('oae.context.send.manageaccess', initManageAccess);

            // Receives the page context and initializes the widget into the share panel.
            $(document).on('oae.context.send.manageaccess-add', function(ev, data) {
                initManageAccess(ev, data);
                renderShare();
                showPanel('share');
            });

            // Reset the widget when it is dismissed.
            $('#manageaccess-modal', $rootel).on('hidden', reset);
        };

        /**
         * Binds actions to various elements in the group permissions widget
         */
        var addBinding = function() {
            // Render the visibility container when clicking 'change' in the visibility well
            $rootel.on('click', '#manageaccess-change-visibility', function() {
                renderVisibility();
                showPanel('visibility');
            });

            // Update the overview container when saving the visibility setting
            $rootel.on('click', '#manageaccess-visibility-save', function() {
                // Update the visibility in the cached visibility
                visibility = $('.oae-visibility-choice-container input[type="radio"]:checked', $rootel).val();
                renderVisibilityOverview();
                showPanel('overview');
                // Enable or disable the save button
                enableDisableSave();
            });

            // Render the share container when clicking 'add more' at the bottom of the list of members
            $rootel.on('click', '#manageaccess-share-add-more', function() {
                renderShare();
                showPanel('share');
            });

            // Update the overview container when saving the autosuggest values
            $rootel.on('click', '#manageaccess-share-update', function() {
                addNewMembers(getAutosuggestSelection());
                showPanel('overview');
                // Disable the add button in the share view
                $('#manageaccess-share-update', $rootel).prop('disabled', true);
            });

            // Catch changes in the visibility radio group
            $rootel.on('change', '.oae-visibility-choice-container input[type="radio"]', function() {
                $('.oae-visibility-choice', $rootel).removeClass('checked');
                $(this).parents('.oae-visibility-choice').addClass('checked');
            });

            // Delete a member from the list
            $rootel.on('click', '.oae-listitem-actions .close', deleteMember);

            // Update a member's role in the list
            $rootel.on('change', '.oae-listitem-actions select', updateRole);

            // Cancel the editing of visibility or members and go back to the overview
            $rootel.on('click', '.manageaccess-cancel', function() {
                showPanel('overview');
            });

            // Save the visibility and members
            $rootel.on('click', '#manageaccess-overview-save', saveManageAccess);
        };

        setUpManageAccessModal();
        addBinding();

    };
});
